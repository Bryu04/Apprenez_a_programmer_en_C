                            Partie 1 : Faites vos premiers pas avec le langage C

Tirez un maximum de ce cours

Débutez la programmation avec le C

Doit-on commencer la programmation par un langage en particulier comme Java, Python, PHP avant de faire du C ?

Non pas du tout. Vous pouvez commencer par le langage de votre choix.

Ce qu'il faut seulement savoir c'est le C est un langage un peu plus compliqué que le Python par exemple.

Les langages un peu plus "compliqués", on les appelle des langages "bas niveau".

Plus un langage est haut niveau, plus il est proche de votre langue comme le français. Un langage de haut niveau est donc facile à utiliser.

Le C est un langage bas niveau. C’est donc a priori plus difficile. Mais grâce à ces bases solides, vous serez ensuite capable d'apprendre beaucoup plus rapidement un autre langage de programmation si vous le désirez. Et avec plus d’autonomie !

Par ailleurs, le C est un langage très populaire. Il est utilisé pour programmer une grande partie des logiciels que vous connaissez. C'est un des langages les plus connus et les plus utilisés qui existent. Il est très fréquent qu'il soit enseigné lors d'études supérieures en informatique. Le langage C est à la base des plus grands systèmes d'exploitation tels UNIX (et donc Linux et Mac OS) ou Windows.

J'ai entendu parler de C++ aussi, mais quelle est la différence avec le C ?

Le langage C et le langage C++ sont très similaires. Ils sont tous les deux toujours très utilisés. Pour bien comprendre comment ils sont nés, il faut faire un peu d'histoire.

À l'époque où les ordinateurs pesaient des tonnes et faisaient la taille de votre maison, on a commencé à inventer un langage de programmation appelé l'Algol. Puis on a créé un nouveau langage appelé le CPL, qui évolua lui-même en BCPL, qui prit ensuite le nom de langage B. Un beau jour, on en est arrivé à créer un autre langage encore, qu'on a appelé… le langage C. Ce langage, s'il a subi quelques modifications, reste encore un des plus utilisés aujourd'hui. Un peu plus tard, on a proposé d'y ajouter des choses : une sorte d'amélioration, si vous voulez. Ce nouveau langage, que l'on a appelé « C++ », est entièrement basé sur le C. Le langage C++ n'est en fait rien d'autre que le langage C avec des ajouts permettant de programmer d'une façon différente.

Le C++ n'est pas meilleur que le langage C, il permet juste de programmer différemment.

En fait, il permet de programmer un peu plus efficacement, et de mieux hiérarchiser le code de son programme. Si vous voulez passer au C++ par la suite, j'ai créé un cours sur le sujet !

Rencontrez vos professeurs

Mathieu Nebra, Co-fondateur d’OpenClassrooms et Directeur de l'innovation

Faut-il encore vous présenter Mathieu ? Le premier enseignant de la plateforme ! Tous ses cours sont très suivis et appréciés. Nous les mettons progressivement à jour pour qu’ils correspondent à ce que nous savons faire de mieux en termes de multimédia et de pédagogie.

Mathieu vous accompagne pour vous présenter les notions clés : vous le retrouverez dans le texte du cours et en vidéo face caméra !

Ranga a enregistré rien que pour vous des vidéos tutorées, pour vous permettre de plonger dans le monde du C et d'avancer de façon guidée, pas à pas, dans votre apprentissage !

Apprenez en pratiquant

Dans ce cours, vous retrouverez :

  - Des vidéos d’introduction qui font la synthèse des principales informations à retenir.

  - Du texte qui apporte des explications complémentaires et des exemples concrets, présente des outils 
    spécifiques et liste des ressources externes à consulter, ou encore des fichiers à télécharger.

  - Des screencasts tutoriels. Ce sont des vidéos de démonstration qui permettent de suivre étape par étape la 
    réalisation d’un point du cours directement sur l’ordinateur de l’expert-formateur.

  - Des exercices dans les sections "À vous de jouer". C’est l’occasion de mettre en pratique ; ils sont 
    précieux pour accélérer votre apprentissage !

  - Des quiz pour vous permettre de valider ce que vous avez appris.

Vous êtes prêt ? Allez, c’est parti !

Dans le prochain chapitre, vous allez installer les outils nécessaires pour coder votre premier programme !

#############################################################################################################

Installez les outils nécessaires pour programmer


Voici le strict minimum pour un programmeur :

  - un éditeur de texte pour écrire le code source du programme. En théorie un logiciel comme le bloc-notes sous Windows, ou "vi" sous Linux, fait l'affaire. L'idéal, c'est d'avoir un éditeur de texte intelligent qui colore tout seul le code, ce qui vous permet de vous y repérer bien plus facilement ;

  - un compilateur pour transformer (compiler) votre source en binaire ;

  - un débogueur pour vous aider à traquer les erreurs dans votre programme. 

Soit on récupère chacun de ces trois programmes séparément. C'est la méthode la plus compliquée, mais elle fonctionne. Soit on utilise un IDE (environnement de développement). C'est un programme 3-en-1 qui combine éditeur de texte, compilateur et débogueur. 

Il existe plusieurs environnements de développement. Au début, vous aurez peut-être un peu de mal à choisir celui qui vous plaît. Une chose est sûre en tout cas : vous pouvez réaliser n'importe quel type de programme, quel que soit l'IDE que vous choisissez.

Choisissez votre environnement de développement

Voici quelques IDE parmi les plus connus. Tous sont disponibles gratuitement.

- Code::Blocks (Windows, Mac et Linux)
Il fonctionne sur la plupart des systèmes d'exploitation.

Note pour les utilisateurs de Linux : il existe de nombreux IDE sous Linux, mais les programmeurs expérimentés préfèrent parfois se passer d'IDE et compiler à la main, ce qui est un peu plus difficile. 

- Visual Studio (Windows uniquement)
Il existe à la base en version payante (chère !), mais il existe heureusement une version gratuite intitulée Visual Studio Community qui est vraiment très bien (il y a peu de différences avec la version payante). Il est très complet et possède un puissant module de correction des erreurs (débogage). 

- Xcode (Mac OS X uniquement)
Sur Mac OS X, vous pouvez utiliser Xcode, généralement fourni sur le CD d'installation de Mac OS X. C'est un IDE très apprécié par tous ceux qui font de la programmation sur Mac.

Xcode est l'IDE le plus utilisé sous Mac, créé par Apple lui-même. Les plus grands logiciels, comme iPhoto et Keynote, ont été codés à l'aide de Xcode. C'est réellement l'outil de développement de choix quand on a un Mac !

Quel est le meilleur de tous ces IDE ?

Tous ces IDE vous permettront de programmer et de suivre le reste de ce cours sans problème. Certains sont plus complets au niveau des options, d'autres un peu plus intuitifs à utiliser, mais dans tous les cas, les programmes que vous créerez seront les mêmes, quel que soit l'IDE que vous utilisez. Ce choix n'est donc pas si crucial qu'on pourrait le croire.

Installez l'un de ces IDE, au choix, en suivant le tutoriel.

Installez Code::Blocks (Windows, Mac OS, Linux)
Code::Blocks n'est disponible pour le moment qu'en anglais, mais cela ne devrait pas vous dissuader de l'utiliser. Quand on programme, on est de toute façon confronté à des documentations (bien souvent) en anglais.

Rendez-vous sur la page de téléchargement de Code::Blocks.

- Si vous êtes sous Windows, téléchargez le logiciel en prenant le programme qui contient mingw-setup dans le nom (ex. :codeblocks-10.05mingw-setup.exe). 

- Si vous êtes sous Linux, choisissez le package qui correspond à votre distribution.

- Si vous êtes sous Mac, choisissez le fichier le plus récent de la liste.

L'installation est simple et rapide (laissez toutes les options par défaut et lancez le programme). Voyons comment faire et profitons-en pour créer notre premier projet :


Installez Visual Studio (Windows seulement)
C'est l'IDE de Microsoft. Il est à la base payant, mais Microsoft a sorti une version gratuite intitulée Visual Studio Community. Il permet de programmer en C, en C++ et en bien d’autres langages.

Nous allons bien entendu voir ici la version gratuite, Visual Studio Community.

Quelles sont les différences avec le "vrai" Visual ?

Il n'y a pas l'éditeur de ressources qui vous permet de dessiner des images, des icônes ou des fenêtres. Mais bon, ça, entre nous, on s'en moque bien parce qu'on n'aura pas besoin de s'en servir dans ce cours. Ce ne sont pas des fonctionnalités indispensables.

Pour télécharger Visual Studio Community, rendez-vous sur le site web de Visual Studio Community. Sélectionnez ensuite Téléchargez Visual Studio un peu plus bas sur la page.

Visual Studio Community est disponible en français et totalement gratuit. Ce n'est donc pas une version d'essai limitée dans le temps. C'est une chance d'avoir un IDE aussi puissant que celui de Microsoft disponible gratuitement, ne la laissez donc pas passer.

L'installation devrait normalement se passer sans encombre. Le programme d'installation va télécharger la dernière version de Visual sur Internet.

Il faut vous enregistrer dans les 30 jours.

Pas de panique, c'est gratuit et rapide ; mais il faut le faire.

Cliquez sur le lien qui vous est donné : vous arrivez sur le site de Microsoft. Connectez-vous avec votre compte Windows Live ID (équivalent du compte Hotmail ou Outlook), ou créez-en un si vous n'en avez pas.

Allez, démarrons l'installation et puis ensuite nous créerons notre premier projet :


Installez Xcode (Mac OS seulement)
Xcode est disponible sur App Store. Commencez donc par le récupérer là-bas.

Je vous conseille de mettre dans vos favoris la page dédiée aux développeurs sur le site d'Apple. Vous y trouverez une foule d'informations utiles pour le développement sous Mac. Vous pourrez notamment y télécharger plusieurs logiciels pour développer.

N'hésitez pas à vous inscrire à l'ADC ("Apple Development Connection"), c'est gratuit et vous serez ainsi tenu au courant des nouveautés.

Allez c'est parti ! Installons Xcode et créons notre premier projet :

En résumé

Les programmeurs ont besoin de trois outils : un éditeur de texte, un compilateur et un débogueur.

Il est possible d'installer ces outils séparément, mais il est courant aujourd'hui d'avoir un package trois-en-un que l'on appelle IDE, l'environnement de développement.

Code::Blocks, Visual Studio Community et Xcode comptent parmi les IDE les plus célèbres.

La configuration de votre environnement de développement est enfin terminée. Nous allons pouvoir passer aux choses sérieuses et créer votre premier programme en C !

##############################################################################################################

Écrivez votre premier programme


On a préparé le terrain jusqu'ici, maintenant il serait bien de commencer à programmer un peu, et on va commencer par quelque chose de très simple !

Écrivez un programme en console
Dans le chapitre précédent, notre IDE nous demandait quel type de programme nous voulions créer, et je vous avais dit de répondre console.

Il faut savoir qu'en fait il existe deux types de programmes, pas plus :

  1. Les programmes graphiques.

  2. Les programmes en console.

Les programmes graphiques sont des programmes qui affichent des fenêtres que l'on peut ouvrir, réduire, fermer, agrandir… Ce sont ceux que vous connaissez sûrement le mieux : Word ou encore Paint sont des programmes graphiques, par exemple.

Les programmeurs parlent de GUI (Graphical User Interface – interface utilisateur graphique, en français). 

Les programmes en console ont été les premiers à apparaître. À l'époque, l'ordinateur ne gérait que le noir et blanc, et il n'était pas assez puissant pour créer des fenêtres comme on le fait aujourd'hui.

Bien entendu, le temps a passé depuis. Si l'ordinateur est devenu grand public, c'est principalement grâce à une simplicité accrue de l'utilisation des fenêtres sur Windows et macOS dès la deuxième moitié des années 1980. Aujourd'hui, beaucoup de monde a oublié ce qu'était la console. Oui vous, là, ne regardez pas derrière vous, je sais que vous vous demandez ce que c'est !

J'ai une grande nouvelle : la console n'est pas morte ! En effet, Linux l'a remise au goût du jour :

Brrr… Terrifiant, hein ? Voilà, vous avez maintenant une petite idée de ce à quoi ressemble une console.

Ceci dit, plusieurs remarques :

  - aujourd'hui on sait afficher de la couleur, tout n'est donc pas en noir et blanc comme on pourrait le 
    croire ;

  - la console est assez peu accueillante pour un débutant ;

  - c'est pourtant un outil puissant quand on sait le maîtriser.

Créer des programmes en mode console comme ici, c'est très facile et c'est idéal pour débuter.

Et sous Windows ? Il n'y a pas de console ?

Si, mais elle est un peu cachée, on va dire.

Vous pouvez avoir une console en faisant Démarrer / Accessoires / Invite de commandes, ou bien encore en faisant Démarrer / Exécuter… et en tapant ensuite cmd:

Si vous êtes sous Windows, sachez que c'est dans une fenêtre qui ressemble à ça que nous ferons nos premiers programmes. Si j'ai choisi de commencer par des petits programmes en console, ce n'est pas pour vous ennuyer, bien au contraire ! En commençant par là, vous apprendrez les bases nécessaires pour pouvoir ensuite créer des fenêtres.

Tapez un minimum de code

C'est ce "code minimum" que nous allons découvrir maintenant. Il devrait servir de base pour la plupart de vos programmes en langage C.

Demandez le code minimal à votre IDE
Selon l'IDE que vous avez choisi dans le chapitre précédent, la méthode pour créer un nouveau projet n'est pas la même. Relisez-le si vous avez oublié comment faire.

Dans la vidéo suivante, nous allons voir comment créer le code minimum à l’aide d'un IDE. Nous analyserons ce code afin de comprendre l'intérêt de chaque ligne. Pour terminer, nous allons tester le code en le compilant et l'exécutant.

Voici le code le minimal en langage C dont on a besoin :

#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("Hello world!\n");
    return 0;
}

Notez que la ligne :

int main()
… peut aussi s'écrire :

int main(int argc, char *argv[])
Les deux écritures sont possibles, mais la seconde (la compliquée) est la plus courante. C'est celle que j'utiliserai dans les prochains chapitres.

Que l'on utilise l'une ou l'autre des écritures, ça ne changera rien pour nous. Inutile donc de s'y attarder, surtout que nous n'avons pas encore le niveau pour analyser ce que ça signifie.

Si vous êtes sous un autre IDE, copiez ce code source dans votre fichier main.c pour que nous ayons le même code.

Enregistrez le tout. Oui je sais, on n'a encore rien fait, mais enregistrez quand même, c'est une bonne habitude à prendre. Normalement, vous n'avez qu'un seul fichier source appelé main.c ; le reste, ce sont des fichiers de projet générés par votre IDE.


Analysez le code minimal

Ce code minimal n'est rien d'autre que du chinois pour vous, j'imagine. Et pourtant, moi je vois là un programme console qui affiche un message à l'écran. Il va falloir apprendre à lire tout ça !

Commençons par les deux premières lignes qui se ressemblent beaucoup :

  1. #include <stdio.h>
  2. #include <stdlib.h>

Ce sont des lignes spéciales que l'on ne voit qu'en haut des fichiers source. Ces lignes sont facilement reconnaissables car elles commencent par un dièse #. Ces lignes spéciales, on les appelle directives de préprocesseur (un nom compliqué, n'est-ce pas ?). Ce sont des lignes qui seront lues par un programme appelé "préprocesseur", un programme qui se lance au début de la compilation.

Oui mais elles signifient quoi, ces lignes ? 

Le mot include en anglais signifie "inclure" en français. Ces lignes demandent d'inclure des fichiers au projet, c'est-à-dire d'ajouter des fichiers pour la compilation.

Il y a deux lignes, donc deux fichiers inclus :

  1. stdio.h 

  2. stdlib.h

On appelle ces fichiers des bibliothèques (certains parlent aussi de librairies, mais c'est un anglicisme), et ils contiennent du code tout prêt qui permet d'afficher du texte à l'écran.

Sans ces fichiers, écrire du texte à l'écran aurait été mission impossible. L'ordinateur à la base ne sait rien faire, il faut tout lui dire. Vous voyez la galère dans laquelle on est !

Bref, en résumé les deux premières lignes incluent les bibliothèques qui vont nous permettre (entre autres) d'afficher du texte à l'écran assez facilement.


Passons à la suite :

int main()
{
    printf("Hello world!\n");
    return 0;
}

Ce que vous voyez là, entre les accolades, c'est ce qu'on appelle une fonction. Pour le moment, notre programme n'en contient qu'une seule.

Un programme en langage C est constitué de fonctions.

Chaque fonction permet de rassembler plusieurs commandes à l'ordinateur qui permettent de faire quelque chose de précis.

Par exemple, on peut créer une fonction ouvrir_fichier qui contiendra une suite d'instructions pour l'ordinateur, lui expliquant comment ouvrir un fichier.

L'avantage, c'est qu'une fois la fonction écrite, vous n'aurez plus qu'à dire ouvrir_fichier et votre ordinateur saura comment faire sans que vous ayez à tout répéter !

Sans rentrer dans les détails de la construction d'une fonction (il est trop tôt), analysons quand même ses grandes parties. La première ligne contient le nom de la fonction, c'est le deuxième mot.
Oui : notre fonction s'appelle donc main. C'est un nom de fonction particulier qui signifie "principal". main est la fonction principale de votre programme, c'est toujours par la fonction main que le programme commence.

Une fonction a un début et une fin, délimités par des accolades {  et }. Toute la fonction main se trouve donc entre ces accolades. Si vous avez bien suivi, notre fonction main contient deux lignes :

{
    printf("Hello world!\n");
    return 0;
}

Ces lignes à l'intérieur d'une fonction ont un nom. On les appelle instructions (ça en fait du vocabulaire qu'il va falloir retenir). Chaque instruction est une commande à l'ordinateur. Chacune de ces lignes demande à l'ordinateur de faire quelque chose de précis.

En regroupant intelligemment (c'est le travail du programmeur) les instructions dans des fonctions, on crée des "bouts de programmes tout prêts".

Un programme, ce n'est au bout du compte rien d'autre qu'une série d'instructions : "fais ceci", "fais cela". Vous donnez des ordres à votre ordinateur et il les exécute. Du moins si vous l'avez bien dressé.

Toute instruction se termine obligatoirement par un point-virgule ;.

C'est d'ailleurs comme ça qu'on reconnaît une instruction. Si vous oubliez de mettre un point-virgule à la fin d'une instruction, votre programme ne compilera pas !

printf("Hello world!\n");  demande à afficher le message "Hello world!" à l'écran. Quand votre programme arrivera à cette ligne, il va donc afficher un message à l'écran, puis passer à l'instruction suivante :

return 0;

Cette ligne indique qu'on arrive à la fin de notre fonction main, et demande de renvoyer la valeur 0.

Pourquoi mon programme renverrait-il le nombre 0 ?

Chaque programme, une fois terminé, renvoie une valeur, pour dire que tout s'est bien passé, par exemple.

En pratique, 0 signifie tout s'est bien passé.

Et n'importe quelle autre valeur signifie qu'il y a une erreur.

La plupart du temps, cette valeur n'est pas vraiment utilisée, mais il faut quand même en renvoyer une. Votre programme aurait marché sans le return 0, mais on va dire que c'est plus propre et plus sérieux de le mettre, donc on le met.

Comme je suis de bonne humeur, je vous fais un schéma qui récapitule le vocabulaire qu'on vient d'apprendre :

Testez votre programme

Tout ce que vous avez à faire, c'est de compiler le projet, puis de l'exécuter. Cliquez sur Build & Run .

Si vous ne l'avez pas encore fait, on vous demandera d'enregistrer les fichiers. Faites-le.

Si la compilation ne fonctionne pas et que vous avez une erreur de ce type :"My-program - Release" uses an invalid compiler. Skipping... Nothing to be done

... cela signifie que vous avez téléchargé la version de Code::Blocks sans mingw  (le compilateur).

Retournez sur le site de Code::Blocks pour télécharger la version avec mingw.

Après un temps d'attente insupportable (la compilation), votre premier programme apparaît :

   1. Le programme affiche "Hello world!" (sur la première ligne).

   2. Les lignes en dessous (générées par l'IDE) indiquent que le programme s'est bien exécuté et combien de 
      temps s'est écoulé depuis le lancement.

Appuyez sur n'importe quelle touche du clavier pour fermer la fenêtre : votre programme s'arrête alors. Oui je sais, ce n'est pas transcendant. Mais bon, quand même ! C'est un premier programme, un instant dont vous vous souviendrez toute votre vie, non ?

Écrivez un message à l'écran

À partir de maintenant, on va modifier nous-mêmes le code de ce programme minimal.
Votre mission, si vous l'acceptez : afficher le message "Bonjour" à l'écran.

Si vous partez du code qui a été donné plus haut, il vous suffit simplement de remplacer "Hello world!" par "Bonjour" dans la ligne qui fait appel à printf.

printf est une instruction. Elle commande à l'ordinateur :

"Affiche-moi ce message à l'écran".

C'est une fonction qui a déjà été écrite par d'autres programmeurs avant vous.

Cette fonction, où se trouve-t-elle ? Moi je ne vois que la fonction main!

Vous vous souvenez de ces deux lignes ?

  1. #include <stdio.h>
  2. #include <stdlib.h>

Elles permettaient d'ajouter des bibliothèques dans votre programme. Ce sont en fait des fichiers avec des tonnes de fonctions toutes prêtes à l'intérieur.

stdio.h et stdlib.h contiennent la plupart des fonctions de base dont on a besoin dans un programme.

stdio.h en particulier contient des fonctions permettant d'afficher des choses à l'écran (comme printf), mais aussi de demander à l'utilisateur de taper quelque chose (ce sont des fonctions que l'on verra plus tard).

Dites bonjour au monsieur
Dans notre fonction main, on fait donc appel à la fonction printf.

C'est une fonction qui en appelle une autre : main appelle printf.

Vous allez voir que c'est tout le temps comme ça que ça se passe en langage C : une fonction contient des instructions qui appellent d'autres fonctions, et ainsi de suite.

Pour faire appel à une fonction, il suffit d'écrire son nom, suivi de  ()  , puis de  ; .

  1. printf();

C'est bien, mais ce n'est pas suffisant. Il faut indiquer quoi écrire à l'écran, en donnant à la fonction printf le texte à afficher :

Ouvrez des guillemets à l'intérieur des parenthèses.

Tapez le texte à afficher entre ces guillemets, comme cela avait déjà été fait sur le code minimal :

  1. printf("Bonjour");

J'espère que vous n'avez pas oublié le point-virgule à la fin : il indique que l'instruction s'arrête là.

Voici le code source que vous devriez avoir sous les yeux :

#include <stdio.h>
#include <stdlib.h>

int main()
{
  printf("Bonjour");
  return 0;
}

On a donc deux instructions qui commandent dans l'ordre à l'ordinateur :

  1. Affiche "Bonjour" à l'écran.

  2. La fonction main est terminée, renvoie 0. Le programme s'arrête alors :

La ligne du "Bonjour" est un peu collée au reste du texte, contrairement à tout à l'heure.

Une solution pour rendre notre programme plus présentable serait de faire un retour à la ligne après "Bonjour" (comme si on appuyait sur la touche "Entrée"). Mais bien sûr, ce serait trop simple de taper "Entrée" dans notre code source pour qu'une entrée soit effectuée à l'écran ! Il va falloir utiliser ce qu'on appelle des caractères spéciaux…

Utilisez des caractères spéciaux

Les caractères spéciaux permettent d'indiquer qu'on veut aller à la ligne, faire une tabulation, etc.

Ils sont faciles à reconnaître : c'est un ensemble de deux caractères :

  1. Le premier est toujours un anti-slash   \  ;

  2. Le second, un nombre ou une lettre.

Voici deux caractères spéciaux courants que vous aurez probablement besoin d'utiliser :

  - \n: retour à la ligne (= "Entrée") ;

  - \t: tabulation.

Pour faire une entrée, il suffit donc de taper\n pour créer un retour à la ligne :

  1. printf("Bonjour\n");

Votre ordinateur comprend qu'il doit afficher "Bonjour" suivi d'un retour à la ligne :

C'est déjà un peu mieux, non ?

Vous pouvez écrire à la suite du \n sans aucun problème, et ce sera placé sur la deuxième ligne. Vous pourriez donc vous entraîner à écrire printf("Bonjour\nAu Revoir\n");. Cela affichera "Bonjour" sur la première ligne et "Au revoir" sur la ligne suivante.

Le syndrome de Gérard

Bonjour, je m'appelle Gérard et j'ai voulu essayer de modifier le programme pour qu'il me dise "Bonjour Gérard". J'ai l'impression que l'accent de Gérard ne s'affiche pas correctement… Que faire ?

Tout d'abord, bonjour Gérard. C'est une question très intéressante que vous nous posez là. Je tiens en premier lieu à vous féliciter pour votre esprit d'initiative, c'est très bien d'avoir eu l'idée de modifier un peu le programme. C'est en bidouillant les programmes que je vous donne que vous allez en apprendre le plus. Ne vous contentez pas de ce que vous lisez, essayez un peu vos propres modifications des programmes que nous voyons ensemble !

Bien ! Maintenant, j'ai une bien triste nouvelle à vous annoncer : la console de Windows ne gère pas les accents. Par contre la console de Linux, oui.

À partir de là, vous avez deux solutions.

  - Passer à Linux. C'est une solution un peu radicale, et il me faudrait un cours entier pour vous expliquer 
    comment vous servir de Linux. Si vous n'avez pas le niveau, oubliez cette possibilité pour le moment.

  - Ne pas utiliser d'accents. C'est malheureusement la solution que vous risquez de choisir. La console de 
    Windows a ses défauts, que voulez-vous. Il va vous falloir prendre l'habitude d'écrire sans accents. Bien 
    entendu, comme plus tard vous ferez probablement des programmes avec des fenêtres, vous ne rencontrerez 
    plus ce problème-là. Je vous recommande donc de ne pas utiliser d'accents temporairement, pendant votre 
    apprentissage dans la console. Vos futurs programmes professionnels n'auront pas ce problème, rassurez-
    vous.

Pour ne pas être gêné, vous devrez donc écrire sans accent :

  1. printf("Bonjour Gerard\n");

On remercie notre ami Gérard de nous avoir soulevé ce problème !

Si d'aventure vous vous appelez Gérard, sachez que je n'ai rien contre ce prénom. C'est simplement le premier prénom avec un accent qui m'est passé par la tête… Et puis, il faut toujours que quelqu'un prenne pour les autres, que voulez-vous !

Commentez votre code

Quel que soit le langage de programmation, on a la possibilité d'ajouter des commentaires à son code. Le langage C n'échappe pas à la règle.

Qu'est-ce que ça veut dire, "commenter" ?

Cela veut dire taper du texte au milieu de votre programme pour indiquer ce qu'il fait, à quoi sert telle ligne de code, etc. C'est indispensable car, même en étant un génie de la programmation, on a besoin de faire quelques annotations par-ci par-là. Les commentaires sont utiles :

  - pour vous y retrouver plus tard : on ne dirait pas comme ça, mais on oublie vite comment fonctionnent les 
    programmes qu'on a écrits ;

  - si vous donnez votre projet à quelqu'un d'autre (qui ne connaît à priori pas votre code source), cela lui 
    permettra de se familiariser avec bien plus rapidement ;

  - pour moi, pour annoter les codes source de ce cours afin de mieux vous expliquer à quoi peut servir telle 
    ou telle ligne de code.

Il y a plusieurs manières d'insérer un commentaire :

  1. Votre commentaire est court : il tient sur une seule ligne, il ne fait que quelques mots. Dans ce cas, 
     vous devez taper un double slash // suivi de votre commentaire :


       1. // Ceci est un commentaire

Vous pouvez aussi bien écrire un commentaire seul sur sa ligne, ou bien à droite d'une instruction. C'est d'ailleurs très pratique pour indiquer à quoi sert la ligne sur laquelle il est :

   1. printf("Bonjour"); // Cette instruction affiche Bonjour à l'écran

Votre commentaire est long : vous avez besoin d'écrire plusieurs phrases qui tiennent sur plusieurs lignes. Dans ce cas, vous devez taper un code qui signifie "début de commentaire" et un autre code qui signifie "fin de commentaire" :

  - pour indiquer le début du commentaire : tapez un slash suivi d'une étoile : /* ;

  - pour indiquer la fin du commentaire : tapez une étoile suivie d'un slash : */.

Vous écrirez donc par exemple :

  1. /* Ceci est
  2. un commentaire
  3. sur plusieurs lignes */

Reprenons notre code source qui écrit "Bonjour", et ajoutons-lui quelques commentaires juste pour s'entraîner :

/*
Ci-dessous, ce sont des directives de préprocesseur.
Ces lignes permettent d'ajouter des fichiers au projet, 
fichiers que l'on appelle bibliothèques.
Grâce à ces bibliothèques, on disposera de fonctions toutes prêtes pour afficher
par exemple un message à l'écran.
*/

#include <stdio.h>
#include <stdlib.h>

/*
Ci-dessous, vous avez la fonction principale du programme, appelée main.
C'est par cette fonction que tous les programmes commencent.
Ici, ma fonction se contente d'afficher Bonjour à l'écran.
*/

int main()
{
  printf("Bonjour"); // Cette instruction affiche Bonjour à l'écran
  return 0;          // Le programme renvoie le nombre 0 puis s'arrête
}

Voilà ce que donnerait notre programme avec quelques commentaires. Oui, il a l'air d'être plus gros, mais c'est le même que tout à l'heure.

Lors de la compilation, tous les commentaires seront ignorés. Ces commentaires n'apparaîtront pas dans le programme final, ils servent seulement aux programmeurs.

Normalement, on ne commente pas chaque ligne du programme.

C'est important de mettre des commentaires dans un code source, mais il faut savoir doser : commenter chaque ligne ne servira la plupart du temps à rien.

À force, vous saurez que printf permet d'afficher un message à l'écran, pas besoin de l'indiquer à chaque fois.

Le mieux est de commenter plusieurs lignes à la fois, c'est-à-dire d'indiquer à quoi sert une série d'instructions, histoire d'avoir une idée. Après, si le programmeur veut se pencher plus en détail dans ces instructions, il est assez intelligent pour y arriver tout seul.

En résumé

  - Les programmes peuvent communiquer avec l'utilisateur via une console ou une fenêtre.

  - Il est beaucoup plus facile pour nos premiers programmes de travailler avec la console, bien que celle-ci 
    soit moins attirante pour un débutant. Cela ne nous empêchera pas par la suite de travailler avec des 
    fenêtres dans la partie III. Tout vient à point à qui sait attendre. 

  - Un programme est constitué d'instructions qui se terminent toutes par un point-virgule.

  - Les instructions sont contenues dans des fonctions qui permettent de les classer, comme dans des boîtes.

  - La fonction main est la fonction par laquelle démarre votre programme. C'est la seule qui soit 
    obligatoire, aucun programme ne peut être compilé sans elle.

  - printf est une fonction toute prête qui permet d'afficher un message à l'écran dans une console. Elle se 
    trouve dans une bibliothèque où l'on retrouve de nombreuses autres fonctions prêtes à l'emploi.

  - Les commentaires doivent guider le programmeur dans son code source, lui permettre de se repérer. Il vaut 
    mieux commenter un ensemble de lignes plutôt que toutes les lignes une par une.

C’est très sympa d’afficher des messages sur la console, mais ce n’est pas suffisant pour créer un vrai programme. Nous allons maintenant voir le rôle des variables dans le code de votre programme. On se donne rendez-vous dans le prochain chapitre pour voir le monde des variables.

##############################################################################################################

Déclarez des variables

Une variable, c'est une petite information temporaire qu'on stocke dans la mémoire vive (RAM).

On dit qu'elle est "variable" car c'est une valeur qui peut changer pendant le déroulement du programme.

Nos programmes sont remplis de variables.

En langage C, une variable est constituée de deux choses :

  1. Une valeur : c'est le nombre qu'elle stocke, par exemple 5.

  2. Un nom : c'est ce qui permet de la reconnaître. En programmant en C, on n'aura pas à retenir l'adresse 
     mémoire (ouf !) : à la place, on va juste indiquer des noms de variables. C'est le compilateur qui fera 
     la conversion entre le nom et l'adresse. Voilà déjà un souci de moins.

Donnez un nom à vos variables

En langage C, chaque variable doit donc avoir un nom. Pour une variable qui retient le nombre de vies dans un programme de jeu, on aimerait bien l'appeler "Nombre de vies" ou quelque chose du genre. Hélas, il y a quelques contraintes.

Vous ne pouvez pas appeler une variable n'importe comment :

  - il ne peut y avoir que des minuscules, des majuscules et des chiffres ;

  - votre nom de variable doit commencer par une lettre ;

  - les espaces sont interdits mais on peut utiliser le caractère "underscore"  _  pour séparer des mots. 
    C'est le seul caractère différent des lettres et chiffres autorisé ;

  - les accents ("é", "à", "ê", etc) et les symboles (+, -, *, /, %, =) sont interdits.

De plus, le langage C fait la différence entre les majuscules et les minuscules. Pour votre culture, sachez qu'on dit que c'est un langage qui "respecte la casse".

Les variables largeur  , LARGEUR ou encore LArgEuR sont trois variables différentes en langage C, même si pour nous ça a l'air de signifier la même chose !

Voici quelques exemples de noms de variables corrects :nombreDeVies  , prenom  ,nom  ,numero_de_telephone  ,numeroDeTelephone.

Chaque programmeur a sa propre façon de nommer des variables. Pendant ce cours, je vais vous montrer ma manière de faire :

  - je commence tous mes noms de variables par une lettre minuscule ;

  - s'il y a plusieurs mots dans mon nom de variable, je mets une lettre majuscule au début de chaque nouveau 
    mot.

Je vais vous demander de faire de la même manière que moi, ça nous permettra d'être sur la même longueur d'ondes.

Quoi que vous fassiez, faites en sorte de donner des noms clairs à vos variables. On aurait pu abréger nombreDeVies  en l'écrivant par exemple ndv. C'est peut-être plus court, mais c'est beaucoup moins clair pour vous quand vous relisez votre code. N'ayez donc pas peur de donner des noms un peu plus longs pour que ça reste compréhensible.

Utilisez différents types de variables

Notre ordinateur n'est en fait rien d'autre qu'une (très grosse) machine à calculer. Il ne sait traiter que des nombres :

  - les nombres entiers positifs et négatifs, comme 45 ou -87 ;

  - les nombres décimaux positifs ou négatifs, comme 75,909 ou -76,9.

Lorsque vous lui demandez de stocker un nombre, vous devez dire de quel type il est.

Voici les principaux types de variables existant en langage C, que l'on peut classer en deux catégories :

  - ceux qui permettent de stocker des nombres entiers : signed char  ,int  ,long ;

  - ceux qui permettent de stocker des nombres décimaux (aussi appelés "nombres flottants") : float  ,double .

Votre ordinateur ne connaît pas la virgule, il utilise le point. Vous ne devez donc pas écrire 54,9 mais plutôt 54.9 !

Le tableau ci-dessous montre les fourchettes de valeurs minimales et maximales garanties par le langage :

Nom du type           Minimum                 Maximum

signed char           -128                    127

int                   -32 768                 32 767

long                  -2 147 483 648          2 147 483 647

float                 1.17549 x 10^-38        3.40282 x 10^+38

double                2.22507 x 10^-308       1.79769 x 10^+308

En réalité, il est fort probable que vous puissiez stocker des valeurs plus élevées que celles-ci. Cependant, veillez à garder ces valeurs en tête lorsque vous choisissez un type, c'est important.

Pour les types entiers ( signed char, int, long…), il existe d'autres types dits unsigned(non signés) qui, eux, ne peuvent stocker que des nombres positifs. Pour les utiliser, il suffit d'écrire le mot unsigned devant le type :

unsigned char         0 à 255

unsigned int          0 à 65 535

unsigned long         0 à 4 294 967 295


Comme vous le voyez, les unsigned sont des types qui ont le défaut de ne pas pouvoir stocker de nombres négatifs, mais l'avantage de pouvoir stocker des nombres deux fois plus grands (signed char s'arrête à 127, tandis que unsigned char s'arrête à 255, par exemple).

Le type char a été présenté soit avec signed, soit avec unsigned, mais jamais seul.

La raison ? Le type peut-être signé ou non signé suivant les machines. Veillez donc à spécifier lequel des deux vous souhaitez utiliser, selon le type de valeur que vous voulez stocker.

Pourquoi avoir créé trois types pour les nombres entiers ? Un seul aurait été suffisant, non ?

Oui, mais on a créé à l'origine plusieurs types pour économiser de la mémoire. Ainsi, quand on dit à l'ordinateur qu'on a besoin d'une variable de type char, on prend moins d'espace en mémoire que si on avait demandé une variable de type int.

Toutefois, c'était utile surtout à l'époque où la mémoire était limitée. Aujourd'hui, nos ordinateurs ont largement assez de mémoire vive pour que ça ne soit plus vraiment un problème. Il ne sera donc pas utile de se prendre la tête pendant des heures sur le choix d'un type. Si vous ne savez pas si votre variable risque de prendre une grosse valeur, mettez int ou double pour un flottant.

En résumé, on fera surtout la distinction entre nombres entiers et flottants :

  - pour un nombre entier, on utilisera le plus souvent int;

  - pour un nombre flottant, on utilisera généralement double.

Déclarez une variable

On y arrive. Maintenant, créez un nouveau projet console que vous appellerez « variables ».
On va voir comment déclarer une variable, c'est-à-dire demander à l'ordinateur la permission d'utiliser un peu de mémoire.

Déclarer une variable, c'est très simple maintenant que vous savez tout ce qu'il faut. Il suffit :

  1. D'indiquer le type de la variable que l'on veut créer.

  2. D'insérer un espace.

  3. D'indiquer le nom que vous voulez donner à la variable.

  4. Et enfin, de ne pas oublier le point-virgule.

Par exemple, si je veux créer ma variable nombreDeVies de type int, je dois taper la ligne suivante :

  1. int nombreDeVies;

Et c'est tout ! Quelques autres exemples stupides pour la forme :

  1. int noteDeMaths;
  2. double sommeArgentRecue; 
  3. unsigned int nombreDeLecteursEnTrainDeLireUnNomDeVariableUnPeuLong;

Bon bref, vous avez compris le principe, je pense !
Vous devez faire les déclarations de variables au début des fonctions. Comme pour le moment on n'a qu'une seule fonction (la fonction main), vous allez déclarer la variable comme ceci :

#include <stdio.h>
#include <stdlib.h>
 
int main(int argc, char *argv[]) // Équivalent de int main()
{
  int nombreDeVies; 
     
  return 0;
}

Si vous lancez le programme ci-dessus, vous constaterez avec stupeur… qu'il ne fait rien.

Comment ça se fait ?

Alors, avant que vous ne m'étrangliez en croyant que je vous mène en bateau depuis tout à l'heure, laissez-moi juste dire une chose pour ma défense : en fait, il se passe des choses, mais vous ne les voyez pas.

Lorsque le programme arrive à la ligne de la déclaration de variable, il demande bien gentiment à l'ordinateur s'il peut utiliser un peu d'espace dans la mémoire vive.

Si tout va bien, l'ordinateur répond « Oui bien sûr, fais comme chez toi ». Généralement, cela se passe sans problème.

Le seul souci qu'il pourrait y avoir, c'est qu'il n'y ait plus de place en mémoire… Mais heureusement cela arrive rarement, car pour remplir toute la mémoire rien qu'avec des int, il faut vraiment le vouloir !

Soyez donc sans crainte, vos variables devraient normalement être créées sans souci.

Astuce : si vous avez plusieurs variables du même type à déclarer, inutile de faire une ligne pour chaque variable.

Il vous suffit de séparer les différents noms de variables par des virgules sur la même ligne.

En tapant int nombreDeVies, niveau, ageDuJoueur;  , vous créez trois variables de type int : 

  1. nombreDeVies.

  2. niveau.

  3. ageDuJoueur .

Et maintenant ?

Maintenant qu'on a créé notre variable, on va pouvoir lui donner une valeur.

Affectez une valeur à une variable

Si vous voulez donner une valeur à la variable nombreDeVies, il suffit de procéder comme ceci :

  1. nombreDeVies = 5;

Rien de plus à faire. Vous indiquez le nom de la variable, un signe égal, puis la valeur que vous voulez y mettre.

Ici, on vient de donner la valeur 5 à la variable nombreDeVies.

Notre programme complet ressemble donc à ceci :

#include <stdio.h>
#include <stdlib.h>
 
int main(int argc, char *argv[])
{
  int nombreDeVies;
  nombreDeVies = 5;
       
  return 0;
}

Là encore, rien ne s'affiche à l'écran, tout se passe dans la mémoire.

Quelque part dans les tréfonds de votre ordinateur, une petite case de mémoire vient de prendre la valeur 5. N'est-ce pas magnifique ?

On peut s'amuser si on veut à changer la valeur par la suite :

  1. int nombreDeVies; 
  2. nombreDeVies = 5;
  3. nombreDeVies = 4;
  4. nombreDeVies = 3;

Dans cet exemple, la variable prend d'abord la valeur 5, puis 4, et enfin 3. Comme votre ordinateur est très rapide, tout cela se passe extrêmement vite. Vous n'avez pas le temps de cligner des yeux que votre variable vient de prendre les valeurs 5, 4 et 3… et ça y est, votre programme est fini.

Quand on déclare une variable, quelle valeur a-t-elle au départ ?

En effet, quand l'ordinateur lit cette ligne :

  1.int nombreDeVies;

... il réserve un petit emplacement en mémoire, d'accord. Mais quelle est la valeur de la variable à ce moment-là ? Y a-t-il une valeur par défaut (par exemple 0) ?

Eh bien, accrochez-vous : la réponse est non. Non, non et non, il n'y a pas de valeur par défaut. En fait, l'emplacement est réservé mais la valeur ne change pas. On n'efface pas ce qui se trouve dans la « case mémoire ». Du coup, votre variable prend la valeur qui se trouvait là avant dans la mémoire, et cette valeur peut être n'importe quoi !
Si cette zone de la mémoire n'a jamais été modifiée, la valeur est peut-être 0. Mais vous n'en êtes pas sûr, il pourrait très bien y avoir le nombre 363 ou 18 à la place, c'est-à-dire un reste d'un vieux programme qui est passé par là avant !

Il faut donc faire très attention à ça si on veut éviter des problèmes par la suite. Le mieux est d'initialiser la variable dès qu'on la déclare. En C, c'est tout à fait possible. En gros, ça consiste à combiner la déclaration et l'affectation d'une variable dans la même instruction :

  1.int nombreDeVies = 5;

Ici, la variable nombreDeVies est déclarée et prend tout de suite la valeur 5. L'avantage, c'est que vous êtes sûr après que cette variable contient une valeur correcte, et pas du n'importe quoi.

Comment on fait pour qu'une variable garde la même valeur pendant toute la durée du programme ? Et que personne n'ait le droit de changer ce qu'elle contient ?

Grâce aux constantes, justement parce que leur valeur reste constante.

Pour déclarer une constante, il faut utiliser le mot const juste devant le type quand vous déclarez votre variable.

Il faut obligatoirement lui donner une valeur au moment de sa déclaration. Après, il sera trop tard : vous ne pourrez plus changer la valeur de la constante.

Exemple :

  1. const int NOMBRE_DE_VIES_INITIALES = 5;

Par convention, on écrit les noms des constantes tout en majuscules. Cela permet de distinguer facilement les constantes des variables.

Notez qu'on utilise l'underscore  _  à la place de l'espace.

Une constante s'utilise comme une variable normale.

La seule chose qui change, c'est que si vous essayez de modifier la valeur de la constante plus loin dans le programme, le compilateur vous indiquera qu'il y a une erreur avec cette constante (les erreurs de compilation sont affichées en bas de l'écran).

Et le compilateur vous affichera alors un mot doux du genre :

[Warning] assignment of read-only variable 'NOMBRE_DE_VIES_INITIALES'

Traduction : « Triple idiot, pourquoi tu essaies de modifier la valeur d'une constante ? ».

Affichez le contenu d'une variable

On sait afficher du texte à l'écran avec la fonction printf.

Maintenant, on va voir comment afficher la valeur d'une variable avec cette même fonction.

On utilise en fait printf de la même manière, sauf que l'on rajoute un symbole spécial à l'endroit où l'on veut afficher la valeur de la variable :

  1. printf("Il vous reste %d vies");

Ce « symbole spécial » est en fait un %  suivi d'une lettre (dans mon exemple, la lettre d).

Cette lettre permet d'indiquer ce que l'on doit afficher.

d  signifie que l'on souhaite afficher un int.

Il existe plusieurs autres possibilités, mais pour des raisons de simplicité on va se contenter de retenir celles-ci :

Format     Type attendu

"%d"        int

"%u"        unsigned int

"%ld"       long

"%f"        float

"%f"        double


Remarquez que le format utilisé pour afficher un float et un double est identique.

Bon, on a indiqué qu'à un endroit précis on voulait afficher un nombre entier, mais on n'a pas précisé lequel ! Il faut donc indiquer à la fonction printf quelle est la variable dont on veut afficher la valeur. Pour ce faire, vous devez taper le nom de la variable après les guillemets, et après avoir rajouté une virgule :

printf("Il vous reste %d vies", nombreDeVies);
Le %d sera remplacé par la variable indiquée après la virgule, à savoir nombreDeVies.

On se teste ça dans un programme ?

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  int nombreDeVies = 5; // Au départ, le joueur a 5 vies
  
  printf("Vous avez %d vies\n", nombreDeVies);
  printf("**** B A M ****\n"); // Là il se prend un grand coup sur la tête
  nombreDeVies = 4; // Il vient de perdre une vie !
  printf("Ah desole, il ne vous reste plus que %d vies maintenant !\n\n", nombreDeVies);
  
  return 0;
}

Ce programme affiche ceci à l'écran :

Vous avez 5 vies
**** B A M ****
Ah desole, il ne vous reste plus que 4 vies maintenant !

Vous devriez reconnaître ce qui se passe dans votre programme.

  1. Au départ le joueur a 5 vies, on affiche ça dans un printf.

  2. Ensuite, le joueur prend un coup sur la tête (d'où le BAM).

  3. Finalement il n'a plus que 4 vies, on affiche ça aussi avec un printf.

Bref, c'est plutôt simple.

Je vous propose tout de même de regarder cette vidéo qui résume comment créer et utiliser une variable :

Affichez plusieurs variables dans un même printf

Il est possible d'afficher la valeur de plusieurs variables dans un seul printf.
Il suffit d'indiquer des %d ou des %f là où vous voulez, puis d'indiquer les variables correspondantes dans le même ordre, séparées par des virgules :

  1.printf("Vous avez %d vies et vous etes au niveau n° %d", nombreDeVies, niveau);

Veillez à indiquer vos variables dans le bon ordre.

  1. Le premier %d sera remplacé par la première variable : nombreDeVies.

  2. Et le second %d par la seconde variable : niveau.

Si vous vous trompez d'ordre, votre phrase ne voudra plus rien dire.

Allez, un petit test maintenant. Notez que j'enlève les lignes tout en haut (les directives de préprocesseur commençant par un #) ; je vais supposer que vous les mettez à chaque fois, maintenant :

int main(int argc, char *argv[])
{
  int nombreDeVies = 5, niveau = 1;
  
  printf("Vous avez %d vies et vous etes au niveau n° %d\n", nombreDeVies, niveau);
  
  return 0;
}

Ce qui affichera :

Vous avez 5 vies et vous etes au niveau n° 1

Récupérez une saisie

Les variables commencent à devenir intéressantes maintenant. On va apprendre à demander à l'utilisateur de taper un nombre dans la console. Ce nombre, on va le récupérer et le stocker dans une variable. Une fois que ça sera fait, on pourra faire tout un tas de choses avec, vous verrez.

Pour demander à l'utilisateur d'entrer quelque chose dans la console, on va utiliser scanf.

Cette fonction ressemble beaucoup à printf :

  1. Vous devez mettre un format pour indiquer ce que l'utilisateur doit entrer : int, float...

  2. Ensuite, vous devez indiquer le nom de la variable qui va recevoir le nombre.

Voici comment faire, par exemple :

  1.int age = 0;
  2.scanf("%d", &age);

On doit mettre :

  - %d entre guillemets ;

  - &  devant le nom de la variable qui va recevoir la valeur.

Attention, il y a une petite divergence de format entre  printf  et  scanf  !

Pour récupérer un float, c'est le format "%f" qu'il faut utiliser.

Mais pour le type double, c'est le format "%lf".

  1.double poids = 0;
  2.scanf("%lf", &poids);

Revenons à notre programme.

Lorsque celui-ci arrive à un scanf, il se met en pause et attend que l'utilisateur entre un nombre. Ce nombre sera stocké dans la variable age.

Voici un petit programme simple qui demande l'âge de l'utilisateur et qui le lui affiche ensuite :

int main(int argc, char *argv[])
{
  int age = 0; // On initialise la variable à 0
  
  printf("Quel age avez-vous ? ");
  scanf("%d", &age); // On demande d'entrer l'âge avec scanf
  printf("Ah ! Vous avez donc %d ans !\n\n", age);
       
  return 0;
}

Quel age avez-vous ? 20
Ah ! Vous avez donc 20 ans !

Le programme se met donc en pause après avoir affiché la question "Quel age avez-vous ?". Le curseur apparaît à l'écran, vous devez taper un nombre entier (votre âge). Tapez ensuite sur "Entrée" pour valider, et le programme continuera à s'exécuter.

Ici, tout ce qu'il fait après, c'est afficher la valeur de la variable age  à l'écran :

"Ah ! Vous avez donc 20 ans !".

Vous avez compris le principe : grâce à la fonction scanf  , on peut donc commencer à interagir avec l'utilisateur.

Notez que rien ne vous empêche de taper autre chose qu'un nombre entier :

  - si vous rentrez un nombre décimal, comme 2.9, il sera automatiquement tronqué, c'est-à-dire que seule la 
    partie entière sera conservée. Dans ce cas, c'est le nombre 2 qui aurait été stocké dans la variable ;

  - si vous tapez des lettres au hasard ("éèydf"), la variable ne changera pas de valeur. Ce qui est bien ici, 
    c'est qu'on avait initialisé notre variable à 0 au début. De ce fait, le programme affichera "0 ans" si ça 
    n'a pas marché. Si on n'avait pas initialisé la variable, le programme aurait pu afficher n'importe quoi !

En résumé

  - Nos ordinateurs possèdent plusieurs types de mémoire comme les registres, la mémoire cache, la mémoire 
    vive et le disque dur. Pour « retenir » des informations, notre programme a besoin de stocker des données 
    dans la mémoire. Il utilise pour cela la mémoire vive.

  - Dans notre code source, les variables sont des données stockées temporairement en mémoire vive. La valeur 
    de ces données peut changer au cours du programme.

  - À l'opposé, on parle de constantes pour des données stockées en mémoire vive. La valeur de ces données ne 
    peut pas changer.

  - Il existe plusieurs types de variables, qui occupent plus ou moins d'espace en mémoire. Certains types 
    comme int sont prévus pour stocker des nombres entiers, tandis que d'autres comme double stockent des 
    nombres décimaux.

  - La fonction scanf permet de demander à l'utilisateur de saisir un nombre. 

Maintenant que vous avez fait connaissance avec les variables, vous allez voir comment les utiliser pour faire des calculs. Je ne vous en dis pas plus, vous allez voir c'est magique !

##############################################################################################################


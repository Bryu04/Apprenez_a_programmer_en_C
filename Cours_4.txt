                           Partie 4 : Allez plus loin pour programmer comme un pro


Créez vos propres types de variables

En C, lorsque l'on cherche à faire des programmes plus complexes, on peut créer nos propres types de variables :

   1. Les structures.

   2. Et les énumérations.

Et bonne nouvelle : c'est plutôt simple à comprendre et à manipuler !


Définissez une structure

Une structure est un assemblage de variables qui peuvent avoir différents types.
Contrairement aux tableaux qui vous obligent à utiliser le même type dans tout le tableau, vous pouvez créer une structure comportant des variables de types long  , char  , int et double à la fois.

Les structures sont généralement définies dans les fichiers .h  , au même titre que les prototypes et les define  .

Pour définir une structure, il suffit de :

  - commencer par taper  struct ;

  - puis écrire le nom de la structure ;

ASTUCE : nommez vos structures en suivant les mêmes règles que pour les noms de variables, sauf que vous mettez la première lettre en majuscule pour pouvoir faire la différence.
Du coup, en regardant mon code, si vous voyez quelque chose comme :

    - ageDuCapitaine , vous saurez qu'il s'agit d'une variable car cela commence par une lettre minuscule ;

    - MorceauAudio , vous saurez qu'il s'agit d'une structure (un type personnalisé) car cela commence par une 
      majuscule.

  - ouvrir ensuite les accolades et les fermer plus loin, comme pour une fonction ;

Attention, ici c'est particulier : vous DEVEZ mettre un point-virgule après l'accolade fermante. C'est obligatoire. Si vous ne le faites pas, la compilation plantera.

  - placer entre les accolades les variables dont est composée votre structure. Une structure est généralement 
    composée d'au moins deux "sous-variables ", sinon elle n'a pas trop d'intérêt. Toutes les structures que 
    vous verrez sont en fait des "assemblages" de variables de type de base, comme long, int, double, etc. 

Voici donc à quoi ressemble une structure  :


struct NomDeVotreStructure
{
    int variable1;
    int variable2;
    int autreVariable;
    double nombreDecimal;
};

Imaginons par exemple que vous vouliez créer une variable qui stocke les coordonnées d'un point à l'écran.

Lorsqu'on travaille en 2D (2 dimensions), on a deux axes : l'axe des abscisses (de gauche à droite) et l'axe des ordonnées (de bas en haut). On a l'habitude d'exprimer les abscisses par une variable appelée x  , et les ordonnées par y  .

Voyons ce que ça donne :

struct Coordonnees
{
    int x; // Abscisses
    int y; // Ordonnées
};


Notre structure s'appelle Coordonnees et est composée de deux variables x et y  , c'est-à-dire de l'abscisse et de l'ordonnée.

Si on le voulait, on pourrait facilement faire une structure Coordonnees pour de la 3D : il suffirait d'ajouter une troisième variable (par exemple z  ) qui indiquerait la hauteur. 


Placez des tableaux dans une structure

Les structures peuvent contenir des tableaux. Ça tombe bien, on va pouvoir ainsi placer des tableaux de char (chaînes de caractères) sans problème !

Allez, imaginons une structure Personne qui stocke diverses informations sur une personne :

struct Personne
{
    char nom[100];
    char prenom[100];
    char adresse[1000];
    
    int age;
    int etudiant; // Booléen : 1 = etudiant, 0 = non etudiant
};

Cette structure est composée de cinq sous-variables. Les trois premières sont des chaînes qui stockeront le nom, le prénom et l'adresse de la personne. Les deux dernières stockent l'âge et le statut étudiant de la personne (c'est un booléen, 1 = vrai = étudiant, 0 = faux = pas étudiant).

Vous pouvez rajouter des variables dans la structure pour la compléter si vous le voulez. Il n'y a pas de limite au nombre de variables dans une structure.

Utilisez une structure dans une fonction

Maintenant que notre structure est définie dans le .h  , on va pouvoir l'utiliser dans une fonction de notre fichier .c  .

Voici comment créer une variable de type Coordonnees  (la structure qu'on a définie plus haut) :

#include "main.h" // Inclusion du .h qui contient les prototypes et structures

int main(int argc, char *argv[])
{
    struct Coordonnees point; // Création d'une variable "point" de type Coordonnees

    return 0;
}


Nous avons ainsi créé une variable point de type Coordonnees  . Cette variable est automatiquement composée de deux sous-variables : x et y  (son abscisse et son ordonnée).

Faut-il obligatoirement écrire le mot-clé struct lors de la définition de la variable ?

Oui, cela permet à l'ordinateur de différencier un type de base (comme int  ) d'un type personnalisé, comme Coordonnees  .

Toutefois, les programmeurs trouvent souvent un peu lourd de mettre le mot struct à chaque définition de variable personnalisée. Pour régler ce problème, ils ont inventé une instruction spéciale : le typedef  .

Créez un alias de structure avec l'instruction typedef

Retournons dans le fichier .h qui contient la définition de notre structure de typeCoordonnees  . Nous allons ajouter une instruction appelée typedef pour créer un alias de structure et dire qu'écrire telle chose équivaut à écrire telle autre chose.

Ajoutons une ligne commençant par typedef juste avant la définition de la structure :

typedef struct Coordonnees Coordonnees;
struct Coordonnees
{
    int x;
    int y;
};

Cette ligne doit être découpée en trois morceaux (non, je n'ai pas bégayé le mot Coordonnees  ) :

  - typedef  : indique que nous allons créer un alias de structure ;

  - struct Coordonnees  : c'est le nom de la structure dont vous allez créer un alias (c'est-à-dire un "équivalent") ;

  - Coordonnees  : c'est le nom de l'équivalent.

En clair, cette ligne dit :

"Écrire le mot Coordonnees est désormais équivalent à écrire struct Coordonnees  ".

En faisant cela, vous n'aurez plus besoin de mettre le mot struct à chaque définition de variable de type Coordonnees  . On peut donc retourner dans notre main et écrire :

int main(int argc, char *argv[])
{
    Coordonnees point; // L'ordinateur comprend qu'il s'agit de "struct Coordonnees" grâce au typedef
    return 0;
}

Je vous recommande de faire un typedef comme je l'ai fait ici pour Coordonnees  . Ça évite d'avoir à écrire le mot struct partout. Un bon programmeur est un programmeur fainéant ! Il en écrit le moins possible.

